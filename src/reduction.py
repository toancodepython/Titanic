import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.datasets import fetch_openml
from time import time
import mlflow
import os
import tensorflow as tf

@st.cache_data
def load_mnist():
    (x_train, _), (x_test, _) = tf.keras.datasets.mnist.load_data()
    x = np.concatenate((x_train, x_test), axis=0)
    x = x.reshape(x.shape[0], -1) / 255.0  # Normalize and flatten
    return x

def log_experiment(model_name, param):
    try:
        DAGSHUB_USERNAME = "toancodepython"  # Thay b·∫±ng username c·ªßa b·∫°n
        DAGSHUB_REPO_NAME = "ml-flow"
        DAGSHUB_TOKEN = "a6e8c1682e60df503248dcf37f42ca15ceaee13a"  # Thay b·∫±ng Access Token c·ªßa b·∫°n
        mlflow.set_tracking_uri("https://dagshub.com/toancodepython/ml-flow.mlflow")
        # Thi·∫øt l·∫≠p authentication b·∫±ng Access Token
        os.environ["MLFLOW_TRACKING_USERNAME"] = DAGSHUB_USERNAME
        os.environ["MLFLOW_TRACKING_PASSWORD"] = DAGSHUB_TOKEN

        experiment_name = "Dimmension Reduce"
        experiment = next((exp for exp in mlflow.search_experiments() if exp.name == experiment_name), None)
        if experiment:
            experiment_id = experiment.experiment_id
            print(f"Experiment ID: {experiment_id}")
            mlflow.set_experiment(experiment_name)
            with mlflow.start_run(run_name = model_name) as run:
                print('Logging...')
                mlflow.log_metric("Explained_variance", param)
                st.success(f"‚úÖ M√¥ h√¨nh ƒë∆∞·ª£c log v√†o th√≠ nghi·ªám: {experiment_name}")
        else:
            # N·∫øu th√≠ nghi·ªám ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
            experiment_id = mlflow.create_experiment(experiment_name)
        print("Active Run:", mlflow.active_run())
    except Exception as e:
        st.warning("Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi MLflow ho·∫∑c DagsHub. Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t.")

def display():
    if "log_success" not in st.session_state:
                st.session_state.log_success = False
    if "explained_variance" not in st.session_state:
            st.session_state.explained_variance = 0
    # T·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML
    st.title("Gi·∫£m chi·ªÅu d·ªØ li·ªáu MNIST v·ªõi PCA & t-SNE")
    st.write("T·∫£i d·ªØ li·ªáu MNIST t·ª´ OpenML...")
    mnist = fetch_openml('mnist_784', version=1)
    X, y = mnist.data.astype(np.float32), mnist.target.astype(int)

    # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
    st.write("### Th√¥ng tin d·ªØ li·ªáu:")
    st.write(f"K√≠ch th∆∞·ªõc d·ªØ li·ªáu: {X.shape}")
    st.write(f"S·ªë nh√£n kh√°c nhau: {np.unique(y)}")

    # Chu·∫©n h√≥a d·ªØ li·ªáu (chia cho 255)
    X /= 255.0
    st.write("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a b·∫±ng c√°ch chia cho 255.")

    # Ng∆∞·ªùi d√πng ch·ªçn s·ªë l∆∞·ª£ng m·∫´u
    num_samples = st.text_input("Nh·∫≠p s·ªë l∆∞·ª£ng m·∫´u t·ª´ 1 ƒë·∫øn 70000:", key = "reduction_1")
    if st.button("X√°c nh·∫≠n s·ªë l∆∞·ª£ng m·∫´u", key = "btn_11"):
        try:
            num_samples = int(num_samples)
            if 1 <= num_samples <= 70000:
                X, y = X[:num_samples], y[:num_samples]
                st.success(f"S·ª≠ d·ª•ng {num_samples} m·∫´u t·ª´ t·∫≠p d·ªØ li·ªáu.")
            else:
                st.error("Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng m·∫´u trong kho·∫£ng 1 ƒë·∫øn 70000.")
        except ValueError:
            st.error("Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n h·ª£p l·ªá.")

    # L·ª±a ch·ªçn thu·∫≠t to√°n
    option = st.selectbox("Ch·ªçn ph∆∞∆°ng ph√°p gi·∫£m chi·ªÅu:", ["PCA", "t-SNE"])

    if option == "PCA":
        n_pca = st.text_input("Nh·∫≠p s·ªë th√†nh ph·∫ßn PCA:", key = "reduction_2")
        if st.button("Th·ª±c hi·ªán PCA", key = "btn_10"):
            try:
                n_pca = int(n_pca)
                st.write(f"Th·ª±c hi·ªán PCA v·ªõi {n_pca} th√†nh ph·∫ßn ch√≠nh...")
                pca = PCA(n_components=n_pca)
                X_pca = pca.fit_transform(X)
                 # ƒê√°nh gi√° t·ªâ l·ªá ph∆∞∆°ng sai gi·ªØ l·∫°i
                explained_variance = np.sum(pca.explained_variance_ratio_)
                st.write(f"T·ªâ l·ªá ph∆∞∆°ng sai gi·ªØ l·∫°i sau PCA: {explained_variance:.4f}")
                st.session_state['explained_variance'] = explained_variance
            except ValueError:
                st.error("Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n h·ª£p l·ªá cho s·ªë th√†nh ph·∫ßn PCA.")

    elif option == "t-SNE":
        perplexity = st.text_input("Nh·∫≠p Perplexity c·ªßa t-SNE:", key = "reduction_3")
        if st.button("Th·ª±c hi·ªán t-SNE", key = "btn_9"):
            try:
                perplexity = int(perplexity)
                st.write("Th·ª±c hi·ªán t-SNE...")
                t0 = time()
                tsne = TSNE(n_components=2, perplexity=perplexity, random_state=42)
                X_tsne = tsne.fit_transform(X)
                st.write(f"Th·ªùi gian th·ª±c hi·ªán t-SNE: {time() - t0:.2f} gi√¢y")
                
                # V·∫Ω k·∫øt qu·∫£ t-SNE
                st.write("Bi·ªÉu di·ªÖn MNIST b·∫±ng t-SNE:")
                fig, ax = plt.subplots(figsize=(10, 8))
                scatter = ax.scatter(X_tsne[:, 0], X_tsne[:, 1], c=y, cmap='tab10', alpha=0.5, s=5)
                fig.colorbar(scatter, label='Label')
                ax.set_xlabel("t-SNE Dimension 1")
                ax.set_ylabel("t-SNE Dimension 2")
                ax.set_title("Bi·ªÉu di·ªÖn MNIST b·∫±ng t-SNE")
                st.pyplot(fig)
            except ValueError:
                st.error("Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n h·ª£p l·ªá cho perplexity c·ªßa t-SNE.")
    model_name = st.text_input("üè∑Ô∏è Nh·∫≠p t√™n m√¥ h√¨nh", key = "reduction_4")
    if st.button("Log Experiment Dimmension Reduce" , key = "btn_8"):
        log_experiment(model_name, param=st.session_state['explained_variance']) 

    # Hi·ªÉn th·ªã tr·∫°ng th√°i log th√†nh c√¥ng
    if st.session_state.log_success:
        st.success("üöÄ Experiment ƒë√£ ƒë∆∞·ª£c log th√†nh c√¥ng!")
    
display()